services:
  webapi:
    build:
      context: .
      dockerfile: WebApi/Dockerfile
    container_name: webapi
    depends_on:
      - writer_postgres
      - connect
    ports:
      - "8080:8080"
      - "8081:8081"
  worker_service1:
    build:
      context: .
      dockerfile: worker service for read repicas/Dockerfile
    container_name: worker_service1
    depends_on:
      - kafka
      - writer_postgres
      - read1_postgres 
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__readDbConnection=Host=read1_postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ConnectionStrings__KafkaConnection=kafka:9092
      - ConsumerGroupId=read1_group  
  worker_service2:
    build:
      context: .
      dockerfile: worker service for read repicas/Dockerfile
    container_name: worker_service2
    depends_on:
      - kafka
      - writer_postgres
      - read2_postgres
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__readDbConnection=Host=read2_postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ConnectionStrings__KafkaConnection=kafka:9092
      - ConsumerGroupId=read2_group
  writer_postgres:
    image: quay.io/debezium/postgres:17
    container_name: writer_postgres
    ports:
      - "5432:5432"   
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
  read1_postgres:
    image: quay.io/debezium/postgres:17
    container_name: read1_postgres
    ports:
      - "5433:5432"   
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
  read2_postgres:
    image: quay.io/debezium/postgres:17
    container_name: read2_postgres
    ports:
      - "5434:5432"   
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - writer_postgres
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  kafka:
    image: quay.io/debezium/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      CLUSTER_ID: LRx92c9yQ+ws786HYosuBn
      NODE_ID: 1
      NODE_ROLE: combined
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  connect:
    image: quay.io/debezium/connect:latest
    container_name: connect
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - writer_postgres
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      PLUGIN_PATH: /kafka/connect

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"

volumes:
  pgadmin_data:
